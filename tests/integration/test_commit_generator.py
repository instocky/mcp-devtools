"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP Get Text Commit

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ test_manual.py, run_test.py –∏ simple_test.py
–¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏.
"""

import asyncio
import pytest
from pathlib import Path
from mcp_get_text_commit.commit_text_generator import CommitTextGenerator


class TestCommitGeneratorIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CommitTextGenerator"""

    @pytest.mark.asyncio
    async def test_fallback_with_invalid_directory(self):
        """–¢–µ—Å—Ç fallback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"""
        result = await CommitTextGenerator.generate(
            working_directory="C:\\not\\a\\git\\repo",
            style="conventional"
        )
        
        assert result.commit_text == "chore: update project files"
        assert result.confidence == 0.1
        assert result.files_analyzed == 0
        assert result.has_changes is True

    @pytest.mark.asyncio
    async def test_with_current_project_directory(self):
        """–¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
        project_root = Path(__file__).parent.parent.parent
        
        result = await CommitTextGenerator.generate(
            working_directory=str(project_root),
            style="conventional"
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        assert isinstance(result.commit_text, str)
        assert isinstance(result.confidence, float)
        assert isinstance(result.files_analyzed, int)
        assert isinstance(result.has_changes, bool)
        assert 0.0 <= result.confidence <= 1.0

    @pytest.mark.asyncio
    async def test_with_specific_git_repo_path(self):
        """–¢–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—É—Ç–µ–º –∫ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º test_manual.py
        test_repo_path = "C:\\Projects\\MCP\\0720_mcp-devtools\\mcp-get-text-commit"
        
        if Path(test_repo_path).exists():
            result = await CommitTextGenerator.generate(
                working_directory=test_repo_path,
                style="conventional"
            )
            
            assert isinstance(result.commit_text, str)
            assert isinstance(result.confidence, float)
            assert isinstance(result.files_analyzed, int)
            assert isinstance(result.has_changes, bool)
            assert 0.0 <= result.confidence <= 1.0
        else:
            pytest.skip(f"Test repository path {test_repo_path} does not exist")

    @pytest.mark.asyncio
    async def test_different_commit_styles(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∫–æ–º–º–∏—Ç–æ–≤"""
        styles = ["conventional", "angular", "atom", "gitmoji"]
        project_root = Path(__file__).parent.parent.parent
        
        for style in styles:
            result = await CommitTextGenerator.generate(
                working_directory=str(project_root),
                style=style
            )
            
            assert isinstance(result.commit_text, str)
            assert isinstance(result.confidence, float)
            assert 0.0 <= result.confidence <= 1.0

    @pytest.mark.asyncio
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç —Å None –≤ –∫–∞—á–µ—Å—Ç–≤–µ working_directory
        result = await CommitTextGenerator.generate(
            working_directory=None,
            style="conventional"
        )
        
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å fallback
        assert isinstance(result.commit_text, str)
        assert isinstance(result.confidence, float)
        assert result.confidence >= 0.0


async def manual_test_basic():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑ test_manual.py)"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CommitTextGenerator...")
        
        # –¢–µ—Å—Ç –±–µ–∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å fallback)
        result = await CommitTextGenerator.generate(
            working_directory="C:\\not\\a\\git\\repo",
            style="conventional"
        )
        
        print(f"‚úÖ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result.commit_text}'")
        print(f"   Confidence: {result.confidence}")
        print(f"   Files analyzed: {result.files_analyzed}")
        print(f"   Has changes: {result.has_changes}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def manual_test_real_git():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º (–∏–∑ test_manual.py)"""
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º...")
        
        # –¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        project_root = Path(__file__).parent.parent.parent
        result = await CommitTextGenerator.generate(
            working_directory=str(project_root),
            style="conventional"
        )
        
        print(f"‚úÖ Real git —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result.commit_text}'")
        print(f"   Confidence: {result.confidence}")
        print(f"   Files analyzed: {result.files_analyzed}")
        print(f"   Has changes: {result.has_changes}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def run_manual_tests():
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Get Text Commit...")
    
    success1 = await manual_test_basic()
    success2 = await manual_test_real_git()
    
    if success1 and success2:
        print("\n‚úÖ –í—Å–µ —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö")
    
    return success1 and success2


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    asyncio.run(run_manual_tests())
