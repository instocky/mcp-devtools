#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

import asyncio
from mcp_get_text_commit.commit_text_generator import CommitTextGenerator


async def test_basic():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CommitTextGenerator...")
        
        # –¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        result = await CommitTextGenerator.generate(
            working_directory=str(Path(__file__).parent),
            style="conventional"
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   Commit text: '{result.commit_text}'")
        print(f"   Confidence: {result.confidence}")
        print(f"   Files analyzed: {result.files_analyzed}")
        print(f"   Has changes: {result.has_changes}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Get Text Commit...")
    
    success = await test_basic()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ")
    
    return success


if __name__ == "__main__":
    asyncio.run(main())
